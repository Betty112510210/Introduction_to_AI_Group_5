# -*- coding: utf-8 -*-
"""sentiment analysis + rewriting suggestions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTepEhQYmdQ4Z4UhJXnuFOoxlXd090c_
"""

!pip install openai gradio

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from openai import OpenAI
import gradio as gr

file_path = '/content/drive/MyDrive/Colab Notebooks/intro AI/期末data/label/3000_youtube_sentiment.csv'
df = pd.read_csv(file_path)

# Keep the fields you want to use and merge the text
df = df[['Author', 'Comment', 'label']].copy()
df['text'] = df['Author'].fillna('') + ": " + df['Comment']

machine = OpenAI(api_key="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")

# Main function: sentiment analysis + rewriting suggestions
def analyze_comment(comment):
    # Step 1: Emotion Classification
    class_prompt = f"""
You are a YouTube sentiment classifier. Classify the comment as 'positive', 'neutral', or 'negative'.
Comment: {comment}
Label:
"""
    class_response = machine.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a sentiment classifier."},
            {"role": "user", "content": class_prompt}
        ]
    )
    label = class_response.choices[0].message.content.strip().lower()

    # Step 2: Sentiment score
    score_prompt = f"""
You are a sentiment analysis model trained on YouTube comments. Return a number between -1 and 1 for sentiment.
Comment: {comment}
Score:
"""
    score_response = machine.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You output only sentiment scores."},
            {"role": "user", "content": score_prompt}
        ]
    )
    score = score_response.choices[0].message.content.strip()

    result_text = f"分類：{label}\n 情緒分數：{score}"

    # Step 3: Negative review rewrite suggestions
    if label == "negative":
        rephrase_prompt = f"""
You are a writing coach. A user wrote the following comment on a YouTube video:

"{comment}"

1. Point out what parts of the comment may sound overly negative, offensive, or inappropriate.
2. Explain why it might be problematic or hurtful to some readers.
3. Provide a more neutral and respectful version of the comment.
"""
        rephrase_response = machine.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You help users rewrite negative comments in a respectful tone."},
                {"role": "user", "content": rephrase_prompt}
            ]
        )
        suggestion = rephrase_response.choices[0].message.content.strip()
        result_text += f"\n 建議寫法（更改為較中立版本）：\n{suggestion}"

    return result_text

# Gradio Interface
iface = gr.Interface(
    fn=analyze_comment,
    inputs=gr.Textbox(lines=4, placeholder="請輸入您想在 YouTube上留下的言論..."),
    outputs="text",
    title="YouTube 留言情緒分析器",
    description="輸入留言，分析器會判斷您言論的情緒（正面/中立/負面），提供情緒分數，若為負面則給出建議寫法"
)

iface.launch()